{"version":3,"sources":["context.js","components/Cell/index.js","components/Board/index.js","bombsniffer.js","App.js","serviceWorker.js","index.js","hooks.js"],"names":["Dispatch","createContext","GameDone","Cell","props","adjacentBombCount","bombed","flagged","location","revealed","gameDone","useContext","dispatch","className","filter","Boolean","join","isVisibleBomb","center","icon","onClick","type","time","Date","now","onContextMenu","evt","preventDefault","library","add","faBomb","faFlag","Board","rows","map","row","i","Row","cells","key","cell","makeBoard","width","height","bombCount","new","Array","_","r","c","copy","board","select","column","count","Math","floor","random","setBombs","forEachAdjacent","adjacent","putDerived","isDone","revealRegionAux","visited","has","clear","revealRegion","hasUnknownCell","Set","fn","boardSpec","reset","B","startTime","endTime","reducer","state","action","Error","App","useReducer","currentTime","useState","setCurrentTime","useEffect","request","requestAnimationFrame","updateTime","cancelAnimationFrame","useCurrentTime","elapsedSeconds","Provider","value","window","hostname","match","ReactDOM","render","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccc32c3f.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport let Dispatch = createContext()\nexport let GameDone = createContext()","import React from 'react'\nimport {Dispatch, GameDone} from \"../../context\"\nimport {useContext} from \"../../hooks\"\nimport {FontAwesomeIcon as Icon} from '@fortawesome/react-fontawesome'\nimport {library} from \"@fortawesome/fontawesome-svg-core\"\nimport {faBomb, faFlag} from \"@fortawesome/free-solid-svg-icons\"\nimport \"./index.css\"\nlibrary.add(faBomb, faFlag)\n\n\nexport default function Cell(props) {\n  let {adjacentBombCount, bombed, flagged, location, revealed} = props\n  let gameDone = useContext(GameDone)\n  let dispatch = useContext(Dispatch)\n  let select = () => {\n    if (!revealed && !flagged && !gameDone)\n      dispatch({type: 'select',        location: location, time: Date.now()})\n  }\n  let toggleFlagged = (evt) => {\n    evt.preventDefault()\n    if (!revealed && !gameDone)\n      dispatch({type: 'toggleFlagged', location: location, time: Date.now()})\n  }\n  let className = [\n      \"cell\",\n      flagged  && \"flagged\",\n      revealed && \"revealed\",\n      revealed && (\"adjacent-bomb-count-\" + adjacentBombCount),\n      gameDone && bombed && \"bombed\"\n    ]\n    .filter(Boolean).join(\" \")\n  let isVisibleBomb = bombed && (revealed || gameDone) && !flagged\n  let center =\n      flagged                           ? <Icon icon=\"flag\" />\n    : isVisibleBomb                     ? <Icon icon=\"bomb\" />\n    : revealed && adjacentBombCount > 0 ? adjacentBombCount\n    : null\n  return (\n    <span\n      className={className}\n      onClick={select}\n      onContextMenu={toggleFlagged}\n    >\n      {center}\n    </span>\n  )\n}","import React, {useContext} from 'react'\nimport {GameDone} from \"../../context\"\nimport Cell from \"../Cell\"\nimport \"./index.css\"\n\nexport default function Board(props) {\n  let rows = props.rows.map((row, i) => <Row cells={row} key={i} />)\n  let gameDone = useContext(GameDone)\n  let className = [\n      \"board\",\n      gameDone && \"game-done\"\n    ]\n    .filter(Boolean).join(\" \")\n  return (\n    <div className={className}>\n      {rows}\n    </div>\n  )\n}\n\nfunction Row(props) {\n  let cells = props.cells.map(cell => <Cell {...cell} key={cell.location} />)\n  return (\n    <span className=\"row\">\n      {cells}\n    </span>\n  )\n}","export function makeBoard({width, height, bombCount}) {\n  let rows =\n    [...Array(height)].map((_, r) =>\n      [...Array(width)].map((_, c) => ({\n        bombed: false,\n        flagged: false,\n        revealed: false,\n        // Denormalized context:\n        location: [r, c],\n        adjacentBombCount: 0\n      })))\n  return {new: true, rows, bombCount, height, width}\n}\n\nexport function copy(board) {\n  let rows = board.rows.map(row => row.map(cell => ({...cell})))\n  return {...board, rows}\n}\n\nexport function toggleFlagged(board, location) {\n  let [row, column] = location\n  let cell = board.rows[row][column]\n  if (!isDone(board))\n    cell.flagged = !cell.flagged\n  return board\n}\n\nexport function select(board, location) {\n  if (board.new) {\n    setBombs(board, location)\n    putDerived(board)\n    board.new = false\n  } \n  let [row, column] = location\n  let cell = board.rows[row][column]\n  if (!isDone(board) && !cell.flagged)\n    if (cell.bombed)\n      // Game over\n      cell.revealed = true\n    else\n      revealRegion(board, location)\n  return board\n}\n\nexport function isDone(board) {\n  let hasUnknownCell = false\n  for (let row of board.rows) for (let cell of row) {\n    if ( cell.revealed &&  cell.bombed)\n      return 'lose'\n    if (!cell.revealed && !cell.flagged)\n      hasUnknownCell = true\n  }\n  return !hasUnknownCell ? 'win' : false\n}\n\nexport function flaggedCount(board) {\n  let count = 0\n  for (let row of board.rows) for (let cell of row)\n    cell.flagged && count++\n  return count\n}\n\nfunction setBombs(board, location) {\n  let {rows, bombCount, width, height} = board\n  let [row, column] = location\n  let count = 0\n  while (count < bombCount) {\n    let r = Math.floor(height * Math.random())\n    let c = Math.floor(width  * Math.random())\n    let tooClose =\n         row    - 1 <= r && r <= row    + 1\n      && column - 1 <= c && c <= column + 1\n    if (tooClose || rows[r][c].bombed) continue\n    rows[r][c].bombed = true\n    count++\n  }\n  return board\n}\n\nfunction putDerived(board) {\n  for (let r = 0; r < board.height; r++)\n    for (let c = 0; c < board.width; c++) {\n      board.rows[r][c].adjacentBombCount = 0\n      forEachAdjacent(board, [r, c], (adjacent) => adjacent.bombed && board.rows[r][c].adjacentBombCount++)\n    }\n  return board\n}\n\nlet visited = new Set()\n\nfunction revealRegion(board, location) {\n  revealRegionAux(board, location)\n  visited.clear()\n  return board\n}\n\nfunction revealRegionAux(board, location) {\n  let [row, column] = location\n  let cell = board.rows[row][column]\n  if (visited.has(cell) || cell.flagged) return\n  cell.revealed = true\n  visited.add(cell)\n  if (0 === cell.adjacentBombCount)\n    forEachAdjacent(board, location, (adjacent) => revealRegionAux(board, adjacent.location))\n  return board\n}\n\n\nfunction forEachAdjacent(board, location, fn) {\n  let [row, column] = location\n  for (let c = column - 1; c <= column + 1; c++) {\n    for (let r = row - 1; r <= row + 1; r++) {\n      let inBounds =\n           0 <= c && c < board.width\n        && 0 <= r && r < board.height\n      let notCenter = c !== column || r !== row\n      if (inBounds && notCenter)\n        fn(board.rows[r][c], [r, c], board)\n    }\n  }\n}","import React from 'react'\nimport {useEffect, useReducer, useState} from \"./hooks\"\nimport Board from \"./components/Board\"\nimport * as B from \"./bombsniffer\"\nimport {Dispatch, GameDone} from \"./context\"\n\nlet boardSpec = {width: 9, height: 9, bombCount: 10}\n// let boardSpec = {width: 3, height: 3, bombCount: 1}\nfunction reset() {\n  return {\n    board: B.makeBoard(boardSpec),\n    startTime: null,\n    endTime: null\n  }\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'select': {\n      let board = B.select(B.copy(state.board), action.location)\n      let startTime = state.startTime                      ? state.startTime : action.time\n      let endTime   = (state.endTime  || !B.isDone(board)) ? state.endTime   : action.time\n      return {...state, board, startTime, endTime}\n    }\n    case 'toggleFlagged': {\n      let board = B.toggleFlagged(B.copy(state.board), action.location)\n      let endTime   = (state.endTime  || !B.isDone(board)) ? state.endTime : action.time\n      return {...state, board, endTime}\n    }\n    case 'newGame':\n      return reset()\n    default:\n      throw Error(\"Unknown action type\")\n  }\n}\n\nfunction App() {\n  let [state, dispatch] = useReducer(reducer, reset())\n  let currentTime = useCurrentTime()\n  let elapsedSeconds =\n    state.startTime\n      ? Math.floor(((state.endTime || currentTime) - state.startTime) / 1000)\n      : 0\n  return (\n    currentTime &&\n    <Dispatch.Provider value={dispatch}>\n      <GameDone.Provider value={B.isDone(state.board)}>\n        <p>\n          {\"Time: \" + elapsedSeconds}\n        </p>\n        <p>\n          {\"Remaining: \" + (state.board.bombCount - B.flaggedCount(state.board))}\n        </p>\n        <Board rows={state.board.rows} />\n      </GameDone.Provider>\n    </Dispatch.Provider>\n  )\n}\n\nfunction useCurrentTime() {\n  let [currentTime, setCurrentTime] = useState(Date.now())\n  useEffect(() => {\n    let request = requestAnimationFrame(updateTime)\n    function updateTime() {\n      request = requestAnimationFrame(updateTime)\n      setCurrentTime(Date.now())\n    }\n    return () => request && cancelAnimationFrame(request)\n  }, [])\n  return currentTime\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {WithDevtools} from \"./hooks\"\n\nReactDOM.render(\n  <WithDevtools>\n    <App />\n  </WithDevtools>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export {useReducer, useState} from 'react'\nexport function WithDevtools(props) {\n  return props.children\n}\n\n// import React from 'react'\n// import {StateInspector, useReducer as useReducerWithDevtools, useState as useStateWithDevtools} from \"reinspect\"\n// export function WithDevtools(props) {\n//   return (\n//     <StateInspector name=\"App\">\n//       {props.children}\n//     </StateInspector>\n//   )\n// }\n// export let useReducer = (...args) => useReducerWithDevtools(...args, state => state, \"App\")\n// export let useState   = (...args) => useStateWithDevtools  (...args,                 \"App\")\n\nexport {useEffect, useContext, useRef} from 'react'"],"sourceRoot":""}